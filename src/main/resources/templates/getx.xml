<templateSet group="getx">
  <template name="getcontroller" value="import 'package:get/get.dart';&#10;&#10;class $My$Controller extends GetxController {&#10;&#10;  final _$prop$ = $value$.obs;&#10;  set $prop$(value) =&gt; _$prop$ = value;&#10;  get $prop$ =&gt; _$prop$;&#10;}" description="Generates GetxCtrontroller" toReformat="false" toShortenFQNames="true">
    <variable name="My" expression="" defaultValue="&quot;My&quot;" alwaysStopAt="true" />
    <variable name="prop" expression="" defaultValue="&quot;obj&quot;" alwaysStopAt="true" />
    <variable name="value" expression="" defaultValue="&quot;''&quot;" alwaysStopAt="true" />
    <context>
      <option name="FLUTTER" value="true" />
    </context>
  </template>
  <template name="getfinal_" value="&#10;final _$prop$ = $val$.obs;&#10;get $prop$ =&gt; _$prop$;&#10;set $prop$(val) =&gt; _$prop$ = val;&#10;" description="Generates accessor for Controller: getter, setter and final private var" toReformat="false" toShortenFQNames="true">
    <variable name="prop" expression="" defaultValue="&quot;value&quot;" alwaysStopAt="true" />
    <variable name="val" expression="" defaultValue="&quot;''&quot;" alwaysStopAt="true" />
    <context>
      <option name="FLUTTER" value="true" />
    </context>
  </template>
  <template name="getfinal" value="final $prop$ = $value$.obs;" description="Generates simple final observable." toReformat="false" toShortenFQNames="true">
    <variable name="prop" expression="" defaultValue="&quot;value&quot;" alwaysStopAt="true" />
    <variable name="value" expression="" defaultValue="&quot;''&quot;" alwaysStopAt="true" />
    <context>
      <option name="FLUTTER" value="true" />
    </context>
  </template>
  <template name="getcontrollervoid" value="import 'package:get/get.dart';&#10;&#10;class $My$Controller extends GetxController {&#10;$END$&#10;}" description="Generates an empty GetxCtrontroller" toReformat="false" toShortenFQNames="true">
    <variable name="My" expression="" defaultValue="&quot;My&quot;" alwaysStopAt="true" />
    <context>
      <option name="FLUTTER" value="true" />
    </context>
  </template>
  <template name="getget" value="get $prop$ =&gt;  $otherProp$;$END$" description="Generates a getter for a public variable." toReformat="false" toShortenFQNames="true">
    <variable name="prop" expression="" defaultValue="&quot;prop&quot;" alwaysStopAt="true" />
    <variable name="otherProp" expression="" defaultValue="&quot;otherProp&quot;" alwaysStopAt="true" />
    <context>
      <option name="FLUTTER" value="true" />
    </context>
  </template>
  <template name="getget_" value="get $prop$ =&gt;  _$otherProp$;$END$" description="Generates a getter for a private variable." toReformat="false" toShortenFQNames="true">
    <variable name="prop" expression="" defaultValue="&quot;prop&quot;" alwaysStopAt="true" />
    <variable name="otherProp" expression="" defaultValue="&quot;otherProp&quot;" alwaysStopAt="true" />
    <context>
      <option name="FLUTTER" value="true" />
    </context>
  </template>
  <template name="getset" value="set $prop$(val) =&gt;  $otherProp$ = val;$END$" description="Generates a setter for a public variable." toReformat="false" toShortenFQNames="true">
    <variable name="prop" expression="" defaultValue="&quot;prop&quot;" alwaysStopAt="true" />
    <variable name="otherProp" expression="" defaultValue="&quot;otherProp&quot;" alwaysStopAt="true" />
    <context>
      <option name="FLUTTER" value="true" />
    </context>
  </template>
  <template name="getset_" value="set $prop$(val) =&gt;  _$otherProp$ = val;$END$" description="Generates a setter for a private variable." toReformat="false" toShortenFQNames="true">
    <variable name="prop" expression="" defaultValue="&quot;prop&quot;" alwaysStopAt="true" />
    <variable name="otherProp" expression="" defaultValue="&quot;otherProp&quot;" alwaysStopAt="true" />
    <context>
      <option name="FLUTTER" value="true" />
    </context>
  </template>
  <template name="getmodel" value="class $My$Model {&#10;&#10;  int id;&#10;  String name;&#10;&#10;  $My$Model({ this.id, this.name });&#10;&#10;  $My$Model.fromJson(Map&lt;String, dynamic&gt; json){&#10;      this.id = json['id'];&#10;      this.name = json['name'];&#10;  }&#10;&#10;  Map&lt;String, dynamic&gt; toJson() =&gt; {'id':id, 'name':name };&#10;}$END$" description="Generates a base Model for data." toReformat="false" toShortenFQNames="true">
    <variable name="My" expression="" defaultValue="&quot;My&quot;" alwaysStopAt="true" />
    <context>
      <option name="FLUTTER" value="true" />
    </context>
  </template>
  <template name="getrxmodel" value="import 'package:get/get.dart';&#10;&#10;class Rx$My$Model {&#10;  final id = 0.obs;&#10;  final name = 'name'.obs;&#10;}&#10;&#10;class $My$Model {&#10;  $My$Model({id, name});&#10;&#10;  final rx = Rx$My$Model();&#10;&#10;  get name =&gt; rx.name;&#10;  set name(value) =&gt; rx.name = value;&#10;&#10;  get id =&gt; rx.id;&#10;  set id(value) =&gt; rx.id = value;&#10;&#10;  $My$Model.fromJson(Map&lt;String, dynamic&gt; json) {&#10;    id = json['id'];&#10;    name = json['name'];&#10;  }&#10;&#10;  Map&lt;String, dynamic&gt; toJson() =&gt; {&#10;    'name' : name, 'id':id,&#10;  };&#10;}&#10;$END$" description="Generates a sample RxModel." toReformat="false" toShortenFQNames="true">
    <variable name="My" expression="" defaultValue="&quot;My&quot;" alwaysStopAt="true" />
    <context>
      <option name="FLUTTER" value="true" />
    </context>
  </template>
  <template name="getprovider" value="import 'dart:convert';&#10;import 'package:http/http.dart' as http;&#10;import 'package:meta/meta.dart';&#10;&#10;const baseUrl = 'http://gerador-nomes.herokuapp.com/nomes/10';&#10;&#10;class $My$ApiClient {&#10;  final http.Client httpClient;&#10;&#10;  $My$ApiClient({@required this.httpClient});&#10;&#10;  final Map&lt;String, String&gt; _defaultHeaders = {&#10;    'Content-Type': 'application/json'&#10;  };&#10;&#10;  Future&lt;List&lt;$Model$&gt;&gt; getAll() async {&#10;    try {&#10;      final response = await httpClient.get(baseUrl);&#10;      if (response.statusCode == 200) {&#10;        Map&lt;String, dynamic&gt; jsonResponse = jsonDecode(response.body);&#10;        return jsonResponse['data']&#10;            .map((json) =&gt; $Model$.fromJson(json))&#10;            .toList();&#10;      } else {&#10;        print('Error -getAll');&#10;      }&#10;    } catch (_) {}&#10;    return null;&#10;  }&#10;&#10;  Future getId(id) async {&#10;    try {&#10;      final response = await httpClient.get(baseUrl);&#10;      if (response.statusCode == 200) {&#10;        Map&lt;String, dynamic&gt; jsonResponse = jsonDecode(response.body);&#10;        // TODO: implement methods!&#10;      } else{&#10;        print('Error -getId');&#10;      }&#10;    } catch (_) {}&#10;    return null;&#10;  }&#10;&#10;  Future add(obj) async {&#10;    try {&#10;      final response = await httpClient.post(baseUrl,&#10;          headers: _defaultHeaders, body: jsonEncode(obj));&#10;      if (response.statusCode == 200) {&#10;        // TODO: implement methods!&#10;      } else {&#10;        print('Error -add');&#10;      }&#10;    } catch (_) {}&#10;    return null;&#10;  }&#10;&#10;  Future edit(obj) async {&#10;    try {&#10;      final response = await httpClient.put(baseUrl,&#10;          headers: _defaultHeaders, body: jsonEncode(obj));&#10;      if (response.statusCode == 200) {&#10;        // TODO: implement methods!&#10;      } else {&#10;        print('Error -edit');&#10;      }&#10;    } catch (_) {}&#10;    return null;&#10;  }&#10;&#10;  Future delete(obj) async {&#10;    try {&#10;      final response = await httpClient.delete(baseUrl);&#10;      if (response.statusCode == 200) {&#10;        // TODO: implement methods!&#10;      } else {&#10;        print('Error -delete');&#10;      }&#10;    } catch (_) {}&#10;    return null;&#10;  }&#10;}$END$" description="Generates a sample Provider file for APIs." toReformat="false" toShortenFQNames="true">
    <variable name="My" expression="" defaultValue="&quot;My&quot;" alwaysStopAt="true" />
    <variable name="Model" expression="" defaultValue="&quot;MyModel&quot;" alwaysStopAt="true" />
    <context>
      <option name="FLUTTER" value="true" />
    </context>
  </template>
  <template name="getproviderdio" value="import 'dart:convert';&#10;import 'package:dio/dio.dart';&#10;import 'package:meta/meta.dart';&#10;&#10;const baseUrl = 'http://gerador-nomes.herokuapp.com/nomes/10';&#10;&#10;class $My$ApiClient {&#10;  final Dio httpClient;&#10;  $My$ApiClient({@required this.httpClient});&#10;&#10;  Future&lt;List&lt;$Model$&gt;&gt;getAll() async {&#10;    try {&#10;      var response = await httpClient.get(baseUrl);&#10;      if (response.statusCode == 200) {&#10;        Map&lt;String, dynamic&gt; jsonResponse = json.decode(response.data);&#10;        return jsonResponse['data'].map((obj) =&gt; $Model$.fromJson(obj)).toList();&#10;      } else {&#10;        print('Error -getAll');&#10;      }&#10;    } catch (_) {}&#10;    return null ;&#10;  }&#10;}$END$" description="Generates a simple sample Provider file with Dio for API." toReformat="false" toShortenFQNames="true">
    <variable name="My" expression="" defaultValue="&quot;My&quot;" alwaysStopAt="true" />
    <variable name="Model" expression="" defaultValue="&quot;MyModel&quot;" alwaysStopAt="true" />
    <context>
      <option name="FLUTTER" value="true" />
    </context>
  </template>
  <template name="getrepo" value="import 'package:meta/meta.dart';&#10;&#10;class $main$Repository {&#10;  final $api$ApiClient apiClient;&#10;&#10;  $main$Repository({@required this.apiClient}) : assert(apiClient != null);&#10;&#10;  getAll() {&#10;    return apiClient.getAll();&#10;  }&#10;&#10;  getId(id) {&#10;    return apiClient.getId(id);&#10;  }&#10;&#10;  delete(id) {&#10;    return apiClient.delete(id);&#10;  }&#10;&#10;  edit(obj) {&#10;    return apiClient.edit(obj);&#10;  }&#10;&#10;  add(obj) {&#10;    return apiClient.add(obj);&#10;  }&#10;}&#10;$END$&#10;" description="Generates a sample Repository file" toReformat="false" toShortenFQNames="true">
    <variable name="main" expression="" defaultValue="&quot;My&quot;" alwaysStopAt="true" />
    <variable name="api" expression="" defaultValue="&quot;My&quot;" alwaysStopAt="true" />
    <context>
      <option name="FLUTTER" value="true" />
    </context>
  </template>
  <template name="getx" value="GetX&lt;$main$&gt;(&#10;  init: $main$(),&#10;  builder: (_) =&gt; Text(_.var),&#10;)$END$" description="GetX widget shortcut." toReformat="false" toShortenFQNames="true">
    <variable name="main" expression="completeSmart()" defaultValue="&quot;HomeController&quot;" alwaysStopAt="true" />
    <context>
      <option name="FLUTTER" value="true" />
    </context>
  </template>
  <template name="getpagevoid" value="import 'package:flutter/material.dart';&#10;import 'package:get/get.dart';&#10;&#10;class $My$Page extends StatelessWidget {&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Scaffold(&#10;      appBar: AppBar(title: Text('$My$ Page')),&#10;      body: Container(&#10;        child: Text('$My$ Body$END$'),&#10;      ),&#10;    );&#10;  }&#10;}" description="Generates a void Page class" toReformat="false" toShortenFQNames="true">
    <variable name="My" expression="" defaultValue="&quot;My&quot;" alwaysStopAt="true" />
    <context>
      <option name="FLUTTER" value="true" />
    </context>
  </template>
  <template name="getpage" value="import 'package:flutter/material.dart';&#10;import 'package:get/get.dart';&#10;$httpImport$&#10;class $Name$Page extends StatelessWidget {&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Scaffold(&#10;      appBar: AppBar(title: Text('$Name$ Page')),&#10;      body: $WidgetParent$(&#10;        child: GetX&lt;$Controller$&gt;(&#10;            init: $Controller$(),&#10;            builder: (_) {&#10;              return $WidgetChild$($END$);&#10;            }),&#10;      ),&#10;    );&#10;  }&#10;}&#10;" description="Generates a Page file with a Controller" toReformat="false" toShortenFQNames="true">
    <variable name="httpImport" expression="enum(&quot;import 'package:http/http.dart' as http;&quot;,&quot;import 'package:dio/dio.dart';&quot;,&quot; &quot;)" defaultValue="&quot; &quot;" alwaysStopAt="true" />
    <variable name="Name" expression="" defaultValue="&quot;My&quot;" alwaysStopAt="true" />
    <variable name="WidgetParent" expression="" defaultValue="&quot;Container&quot;" alwaysStopAt="true" />
    <variable name="Controller" expression="" defaultValue="&quot;MyController&quot;" alwaysStopAt="true" />
    <variable name="WidgetChild" expression="" defaultValue="&quot;Container&quot;" alwaysStopAt="true" />
    <context>
      <option name="FLUTTER" value="true" />
    </context>
  </template>
  <template name="getobx" value="Obx(() =&gt; $END$)," description="Generates ObxX function" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="FLUTTER" value="true" />
    </context>
  </template>
  <template name="getbutton" value="RaisedButton(&#10;    onPressed: () {$END$},&#10;    child: Text( '$text$',&#10;        style: TextStyle( fontSize: $size$, color: Colors.white ),&#10;    ),&#10;    color: Colors.blue,&#10;    splashColor: Colors.blueGrey.withOpacity(.4),&#10;)," description="Generates a RaisedButton" toReformat="false" toShortenFQNames="true">
    <variable name="text" expression="" defaultValue="&quot;OK&quot;" alwaysStopAt="true" />
    <variable name="size" expression="" defaultValue="&quot;16&quot;" alwaysStopAt="true" />
    <context>
      <option name="FLUTTER" value="true" />
    </context>
  </template>
</templateSet>